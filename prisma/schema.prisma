// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String?
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  studyPacks   StudyPack[]
  quizAttempts QuizAttempt[]
}

model StudyPack {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  title      String
  sourceType String
  sourceUrl  String?

  notesJson                 Json
  flashcardsJson            Json?
  mindmapJson               Json?
  flashcardAvailabilityJson Json?

  quizzes Quiz[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastAccessedAt DateTime?

  @@index([userId])
  @@index([lastAccessedAt])
}

model Quiz {
  id          String    @id @default(cuid())
  studyPack   StudyPack @relation(fields: [studyPackId], references: [id])
  studyPackId String

  title      String
  type       String 
  difficulty String 
  questionCount Int
  createdAt  DateTime @default(now())
  questions  Json 

  quizAttempts QuizAttempt[]

  @@index([studyPackId])
}

model QuizAttempt {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  score       Float
  attemptedAt DateTime @default(now())
}
